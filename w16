#include "pitches.h"



const int buttonPin=2;
int buttonState=0;

// notes in the melody:
int latchPin = 8;
int clockPin = 12;
int dataPin = 11;
byte colDataMatrix[8] = { 
   B01111111,
   B10111111,
   B11011111,
   B11101111,
   B11110111,
   B11111011,
   B11111101,
   B11111110
  };
                      
byte rowDataMatrix[8] = {
    B11111111,
    B10100101,
    B10100101,
    B11111111,
    B11111111,
    B10100101,
    B10100101,
    B11111111
  };
  byte rowDataMatrixx[8] = {
    B10000001,
    B01000010,
    B00100100,
    B00011000,
    B00011000,
    B00100100,
    B01000010,
    B10000001
  };
int delay_time = 1;



int melody[] = {
  NOTE_C4, NOTE_G3, NOTE_G3, NOTE_A3, NOTE_G3, 0, NOTE_B3, NOTE_C4
};

// note durations: 4 = quarter note, 8 = eighth note, etc.:
int noteDurations[] = {
  4, 8, 8, 4, 4, 4, 4, 4
};
const int buzzer = 8;
const int toneTable[7][5]={  
  { 66, 131, 262, 523, 1046},  // C Do
  { 74, 147, 294, 587, 1175},  // D Re
  { 83, 165, 330, 659, 1318},  // E Mi
  { 88, 175, 349, 698, 1397},  // F Fa
  { 98, 196, 392, 784, 1568},  // G So
  {110, 220, 440, 880, 1760},  // A La
  {124, 247, 494, 988, 1976}   // B Si
};
char toneName[]="CDEFGAB";
char beeTone[]="GEEFDDCDEFGGGGEEFDDCEGGEDDDDDEFEEEEEFGGEEFDDCEGGC";
char starTone[]="CCGGAAGFFEEDDCGGFFEEDGGFFEEDCCGGAAGFFEEDDC";
 int beeBeat[]={
 1,1,2, 1,1,2, 1,1,1,1,1,1,2,
  1,1,2, 1,1,2, 1,1,1,1,4,
  1,1,1,1,1,1,2, 1,1,1,1,1,1,2,
  1,1,2, 1,1,2, 1,1,1,1,4
};
int starBeat[]={
  1,1,1,1,1,1,2, 1,1,1,1,1,1,2,
  1,1,1,1,1,1,2, 1,1,1,1,1,1,2,
  1,1,1,1,1,1,2, 1,1,1,1,1,1,2
};
int getTone(char symbol) {
  int toneNo = 0;
  for ( int ii=0; ii<7; ii++ ) {
      if ( toneName[ii]==symbol ) {
          toneNo = ii;
          break;
      }
  }
  return toneNo;
}





void setup() {

pinMode(buttonPin,INPUT);
digitalWrite(buttonPin,HIGH);  
  // iterate over the notes of the melody:
  for (int thisNote = 0; thisNote < 8; thisNote++) {

    // to calculate the note duration, take one second divided by the note type.
    //e.g. quarter note = 1000 / 4, eighth note = 1000/8, etc.
    int noteDuration = 1000 / noteDurations[thisNote];
    tone(8, melody[thisNote], noteDuration);

    // to distinguish the notes, set a minimum time between them.
    // the note's duration + 30% seems to work well:
    int pauseBetweenNotes = noteDuration * 1.30;
    delay(pauseBetweenNotes);
    // stop the tone playing:
    noTone(8);
  }
  pinMode(latchPin,OUTPUT);
pinMode(clockPin,OUTPUT);
pinMode(dataPin,OUTPUT);

}




void loop() {

  buttonState=digitalRead(buttonPin);
  
 // no need to repeat the melody.
//  int ii, length, toneNo;
//  int duration;
//   
 if(buttonState==HIGH){ 
for(int i = 0; i < 8 ; i++){
 //byte colData = colDataMatrix[i];
digitalWrite(latchPin,LOW);
  //  pickDigit(i);
   shiftOut(dataPin, clockPin, MSBFIRST, colDataMatrix[i]);
    shiftOut(dataPin, clockPin, MSBFIRST, rowDataMatrix[i]);
    //shiftOut(dataPin, clockPin, MSBFIRST, colDataMatrix[i]);
    digitalWrite(latchPin,HIGH);
    delay(delay_time);
  }
 }
 if(buttonState==LOW){
  for(int i = 0; i < 8 ; i++){
 //byte colData = colDataMatrix[i];
digitalWrite(latchPin,LOW);
  //  pickDigit(i);
   shiftOut(dataPin, clockPin, MSBFIRST, colDataMatrix[i]);
    shiftOut(dataPin, clockPin, MSBFIRST, rowDataMatrixx[i]);
    //shiftOut(dataPin, clockPin, MSBFIRST, colDataMatrixx[i]);
    digitalWrite(latchPin,HIGH);
    delay(delay_time);
  }
   buttonState=digitalRead(buttonPin);
}
    // star
//  length = sizeof(starTone)-1;
//  for ( ii=0; ii<length; ii++ ) {
//      toneNo = getTone(starTone[ii]);
//      duration = starBeat[ii]*333;
//      tone(buzzer,toneTable[toneNo][3]);
//      delay(duration);
//      noTone(buzzer);
//  }
//  noTone(buzzer);
//  delay(2000);
//
}


void pickDigit(int x) {
  byte rowByte = 1 << x;
  shiftOut(dataPin, clockPin, MSBFIRST, rowByte);

}

